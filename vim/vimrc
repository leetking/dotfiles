set nocompatible
set backspace=indent,eol,start
set number
set ruler
"set ignorecase
"set smartcase
set incsearch
set matchtime=5
set history=500
set wildmenu
set nofoldenable
set mouse=a
filetype on         "侦测文件类型
syntax enable       "语法高亮
let mapleader=','
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
nmap <silent> <M-j> mz:m+<CR>`z
nmap <silent> <M-k> mz:m-2<CR>`z
nmap <silent> <Tab>  :tabnext<CR>
nmap <silent> <S-Tab>  :tabprevious<CR>
nmap <silent> gn :cn<CR>
nmap <silent> gp :cp<CR>
vmap <silent> <M-j> :m'>+<CR>`<my`>mzgv`yo`z
vmap <silent> <M-k> :m'<-2<CR>`>my`<mzgv`yo`z
set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4
set smarttab
set fileencodings=ucs-bom,utf-8,gb18030,gb2312,bgk,default,latin1
set fileencoding=utf-8
"set encoding=utf-8
"set completeopt=longest,menuone,preview
set completeopt=longest,menu
"if $TERM == 'xterm' || $TERM == 'rxvt' || $TERM == 'xterm-256color' ||
"            \ $TERM == 'rxvt-unicode' || $TERM == 'dumb' ||
"            \ $TERM == 'vte-256color' || $TERM == 'screen-256color'
"    set t_Co=256
"endif
"set t_Co=256
" enable true color if available
if has("termguicolors")
    set termguicolors
endif

" patch default colors if no 3rd theme specified
highlight TabLineFill ctermfg=235 ctermbg=none guifg=Grey15
highlight TabLine     term=none cterm=none ctermfg=250 ctermbg=235
                    \ gui=none guifg=Grey74 guibg=Grey15
highlight VertSplit   ctermfg=236
highlight TabLineSel  term=bold cterm=bold gui=bold
highlight CursorLine  cterm=none ctermbg=239 guibg=Grey40
highlight CursorLineNr  cterm=none
highlight Comment     term=italic cterm=italic gui=italic
highlight ColorColumn ctermbg=239 guifg=Maroon guibg=Grey40
"colorscheme desert

set fillchars=vert:\ 
set cursorline
set colorcolumn=+1
set laststatus=2
" highlight the white spaces end of line
match TabLineFill /\s\+$/
2match Todo /\<WARN>\|\<NOTE\>\|\<TODO\>/
" for VTE compatible terminal set the shape of cursor at insert mode and
" normal mode
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

"set shortmess=atI
"set lines=28  columns=200
set foldmethod=indent
"set foldmethod=syntax|manual
set foldenable
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
set foldlevel=9
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.png,.jpg

set cinoptions=:0                 "case与switch对齐 TODO 但是注释没对齐
set cindent
set smartindent
set autoindent
"set list listchars=tab:>-
set expandtab

" normal file
function! s:SetNormalOptions()
    "set spell
    setlocal omnifunc=
endfunc

function! s:SetLuaOptions()
    setlocal makeprg=lua\ %
    set textwidth=79 fo+=Mm
endfunc

function! s:SetLispOptions()
    setlocal nocindent
    setlocal autoindent
    setlocal lisp
    " scheme is a link to chez-scheme
    setlocal makeprg=scheme\ --script\ %
    setlocal textwidth=79 fo+=Mm
endfunc

function! s:SetPythonOptions()
    setlocal makeprg=python3\ %
endfunc

function! s:SetRubyOptions()
    setlocal makeprg=ruby\ %
    setlocal textwidth=79 fo+=Mm
    imap <C-Space> <C-X><C-O>
endfunc

function! s:SetCCppOptions()
    setlocal textwidth=79 fo+=Mm
    setlocal makeprg=$HOME/.vim/makeprg.sh\ %:p:.
endfunc

function! s:SetMakeOptions()
    setlocal textwidth=79 fo+=Mm
    setlocal makeprg=make
endfunc

function! s:SetJavaOptions()
    setlocal textwidth=79 fo+=Mm
    setlocal omnifunc=javacomplete#Complete
    setlocal makeprg=$HOME/.vim/makeprg.sh\ %:p:.
endfunc

function! s:SetHtmlXml()
    setlocal tabstop=2
    setlocal shiftwidth=2
    setlocal smarttab
    setlocal autoindent
    "configure emmet
    let g:user_emmet_install_global=0
    EmmetInstall
    "USE: <C-y>展开
    setlocal makeprg=chromium\ %:p\ &
endfunc

" javaScript
function! s:SetJSOptions()
    setlocal textwidth=79 fo+=Mm
    setlocal makeprg=node\ %
endfunc

" Tex
function! s:SetTexOptions()
    setlocal makeprg=xelatex\ -halt-on-error\ %
    setlocal textwidth=80 fo+=Mm
endfunc

autocmd FileType text           call s:SetNormalOptions()
autocmd FileType c,cpp          call s:SetCCppOptions()
autocmd FileType make           call s:SetMakeOptions()
autocmd FileType java,groovy    call s:SetJavaOptions()
autocmd FileType html,xml,xhtml,ant,markdown,rst call s:SetHtmlXml()
autocmd FileType python         call s:SetPythonOptions()
autocmd FileType ruby           call s:SetRubyOptions()
autocmd FileType lisp,scheme    call s:SetLispOptions()
autocmd FileType lua            call s:SetLuaOptions()
autocmd FileType javascript     call s:SetJSOptions()
autocmd FileType tex            call s:SetTexOptions()

let s:sdcv_buf_name = 'sdcv-tmp'
function Sdcv(word) abort
    let expl = system('sdcv -n ' . a:word)
    tabdo if expand('%') ==# s:sdcv_buf_name | q! | endif
    execute 'tabnew' s:sdcv_buf_name
    setlocal buftype=nofile bufhidden=hide noswapfile
    1s/^/\=expl/
    1
endfunc

function s:close_sdcv_tab() abort
    " TODO improve it
    if expand('%') == s:sdcv_buf_name && tabpagenr('$') == 1 && winnr('$') == 1
        q!
    endif
endfunction

nmap <leader>k :call Sdcv(expand('<cword>'))<CR>
autocmd TabClosed * call s:close_sdcv_tab()


"" disable auto switch inputmethod for fcitx
"let g:enable_toggle_input = 0
"function! Fcitx2en()
"    call system("fcitx-remote -c")
"endfunc
"function! Fcitx2zh()
"    call system('fcitx-remote -o')
"endfunc
"function! AutoSwitchInput()
"    if g:enable_toggle_input == 1
"        set timeoutlen=150
"        "自动退出插入模式
"        autocmd InsertLeave * call Fcitx2en()
"        "自动进入插入模式
"        autocmd InsertEnter * call Fcitx2zh()
"    endif
"endfunc
"call AutoSwitchInput()

" save as root
command W w !sudo tee % > /dev/null
nmap <F5> :redraw!<CR>
let g:markdown_fenced_languages = [
     \ 'c', 'cpp', 'lua', 'python', 'css', 'java', 'javascript',
     \ ]

autocmd FileType json syntax match Comment +\/\/.\+$+

" use vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.local/share/vim/plugged')
    "Plug 'scrooloose/nerdtree'
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    "Plug 'jackguo380/vim-lsp-cxx-highlight'
    "Plug 'kien/ctrlp.vim'

    Plug 'itchyny/lightline.vim'
    Plug 'itchyny/vim-gitbranch'
    " a true color theme
    Plug 'jacoborus/tender.vim'
    Plug 'morhetz/gruvbox'

    Plug 'lervag/vimtex'

    "Plug 'mattn/emmet-vim'
    "Plug 'othree/html5.vim'
    "Plug 'hail2u/vim-css3-syntax'

    Plug 'ludovicchabant/vim-gutentags'
    Plug 'skywind3000/gutentags_plus'

    Plug 'yianwillis/vimcdoc'

    " my custom plugs
    Plug '$HOME/.vim/custom.plugs/localrc'
call plug#end()

" set for gui
if has('gui_running')
    set columns=82
    set guicursor=a:blinkon0
    set guioptions=
    " set gui font
    if has('gui_win32')
        set guifont=consolas:h12
    else
        if has('gui_gtk2') || has('gui_gtk3')
            set guifont=Monaco\ 9
        else
            set guifont=Monaco:h9
        endif
    endif
endif

" import configure file of plugins
source $HOME/.vim/plug.conf.vim
