# Shell is non-interactive. Be done now!
if [[ $- != *i* ]]; then
    return
fi


# ref: https://stackoverflow.com/questions/9457233/unlimited-bash-history
# bash 4.3 及其之后支持-1表明不限制history大小
export HISTSIZE=
export HISTFILESIZE=
HISTTIMEFORMAT="%y-%m-%d %T "
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"    # 每条命令执行之后写入历史
export HISTFILE=~/.bash_eternal_history
#HISTIGNORE="ls:l:ll:la:vim:v:vi:gh:cd:..:py:history"
#&: means suppress duplicated entries
#?: ignore one character input, ?? and so on
HISTIGNORE="&:?:??:???:history *:gh *:make"
shopt -s histappend # append commands to history file, rather than overwrite it

# why add $, see https://unix.stackexchange.com/questions/304133/what-is-the-difference-between-single-quoted-string-and-double-quoted-strin
black=$'\e[1;30m'
red=$'\e[1;31m'
green=$'\e[1;32m'
yellow=$'\e[1;33m'
blue=$'\e[1;34m'
magenta=$'\e[1;35m'
cyan=$'\e[1;36m'
white=$'\e[1;37m'
normal=$'\e[m'

has_cmd() {
    hash "$1" &> /dev/null
    return $?
}

has_cmd dircolors && {
[[ -r ~/.dircolors ]] && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
alias ls='ls -F --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias sdcv='sdcv --color'
} # has_cmd dircolors
alias tree='tree -F -C --charset=ascii'
alias ll='ls -hl'
alias la='ls -A'
alias l='ls -CF'
alias v='vim'
alias py='ipython3'
has_cmd bat && alias cat='bat'
has_cmd proxychains && alias ldcv='proxychains -q ldcv'
has_cmd ccal && alias cal='ccal -u'
has_cmd neomutt && alias mutt='neomutt'
#has_cmd nvim && {
#alias vimdiff='nvim -d'
#alias vim='nvim'
#}
#has_cmd bear && alias make='bear make'

#has_cmd git && {
#alias pull='git pull'
#alias push='git push'
#alias sw='git switch'
#alias sc='git sc'
#} # has_cmd git

sub() {
    uniq -u <(sort -n "$1" "$2" "$2")
}

union() {
    uniq <(sort -n "$1" "$2")
}

intersect() {
    uniq -d <(sort -n "$1" "$2")
}


has_cmd xclip && {
clip() {
    # clip [pattern] [file]
    if [[ -e "$1" ]]; then
        xclip -selection clipboard -i "$1"
    else
        # a small trick: $2 without quote if no argument given then put
        #                nothing as STDIN
        #sed -n "$1p" $2 | xclip -selection clipboard
        xclip -selection clipboard <(sed -n "$1p" $2)
    fi
}
} # has_cmd xclip

up() {
    # up [file]
    # TODO implement in Python and put into ~/.local/bin
    local host="https://paste.ubuntu.com"
    local expiration="year"
    local url
    if [[ -f "$1" ]]; then
        url=$(grep -o '/p/\(.\+\)' \
                <(curl --include \
                    --silent \
                    --data-urlencode poster="$USER" \
                    --data-urlencode syntax=text \
                    --data-urlencode expiration=$expiration \
                    --data-urlencode content@"$1" \
                $host))
    elif [[ -z "$1" ]]; then
        url=$(cat | curl --include \
             --silent \
             --data-urlencode poster="$USER" \
             --data-urlencode syntax=text \
             --data-urlencode expiration=$expiration \
             --data-urlencode content@- \
             $host | grep -o '/p/\(.\+\)')
    else
        url=$(grep -o '/p/\(.\+\)' \
                <(curl --include \
                    --silent \
                    --data-urlencode poster="$USER" \
                    --data-urlencode syntax=text \
                    --data-urlencode expiration=$expiration \
                    --data-urlencode content="$1" \
                 $host))
    fi

    echo "$host$url"
}

rm() {
    # move file(s) to $trash (/tmp/.rm.trash/) directory
    local trash="/tmp/.rm.trash"
    [[ ! -e $trash ]] && mkdir -p $trash
    local f
    for f in "$@"; do
        if [[ -e "$f" ]]; then
            suffix="$(cut -d' ' -f1 <(sha256sum <(ls -ld "$f"))).$(date +%F_%H%M%S).bak"
            f=${f%%/}       # remove the suffix '/', if it's a directory
            mv "$f" "$trash/${f##*/}.$suffix"
        else
            echo "rm: connot remove '$f': No such file or directory"
        fi
    done
}

alias rm!='/bin/rm'

empty-trash() {
    local trash="/tmp/.rm.trash"
    rm! -rf $trash/*
}

has_cmd gs && {
mergepdf() {
    # merge pdf files to one using `gs' command
    # > mergepdf <pdf-filelist> <output.pdf>
    local inputlist="${@:1:$#-1}"
    local output="${@:$#}"
    gs -q -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile="$output" "$(echo ${inputlist[@]})"
}

shrinkpdf() {
    # reduce pdf file size
    # > shrinkpdf <input.pdf> <output.pdf>
    local input="$1"
    local output="$2"
    if [[ ! -f "$input" ]]; then
        echo "shrinkpdf <input.pdf> <output.pdf>"
        echo "input file ($input) not found"
        return 1
    fi
    if [[ -e "$2" ]]; then
        echo "shrinkpdf <input.pdf> <output.pdf>"
        echo "output file (\"$output\") existed"
        return 2
    fi
    gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dNOPAUSE -dQUIET -dBATCH -dPDFSETTINGS=/ebook \
        -sOutputFile="$output" "$input"
}
}

host=''
# from network login?
if grep -Pq '\(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\)' <(who -m); then
    host="$(hostname) "
fi
prompt_color="$white"
if [[ 0 == $(id -u) ]]; then
    prompt_color="$red"
fi

gen_short_workpath() {
    local short_workspace=''
    local dir="$PWD"
    if [[ "$dir" == "/" ]]; then
        echo "/"
        return
    fi
    if [[ $dir == ${HOME}* ]]; then
        short_workspace="~"
        dir=${dir#${HOME}}
    fi
    local SAVEIFS="$IFS"
    IFS=$'\n\b'
    local tmp=(${dir//\//$'\n'})
    local lastidx=$((${#tmp[@]}-1))
    if [[ $lastidx -lt 0 ]]; then
        IFS="$SAVEIFS"
        echo "$short_workspace"
        return
    fi
    dir=""
    local i
    for ((i = 0; i < lastidx; ++i)); do
        dir="${dir}/$(grep -Po '^\.*[^/]?' <<< ${tmp[$i]})"
    done
    dir="${dir}/${tmp[$lastidx]}"
    short_workspace=$short_workspace$dir
    IFS="$SAVEIFS"
    echo "$short_workspace"
}

find_git_branch () {
    local git_branch=''
    local dir=. head
    until [[ "$dir" -ef / ]]; do
        if [[ -r "$dir/.git/HEAD" ]]; then
            local head=$(< "$dir/.git/HEAD")
            if [[ $head = ref:\ refs/heads/* ]]; then
                git_branch="(${head#*/*/})"
            elif [[ $head != '' ]]; then
                git_branch="((detached))"
            else
                git_branch="((unknow))"
            fi
            echo $git_branch
            return
        fi
        dir="../$dir"
    done
}

# improve command cd through `lcsfind`
# that is a lua script implemented by lcs algorithm.
cd() {
    if [[ $# -lt 1 ]]; then
        builtin cd
        return $?
    fi
    ! which lcsfind &> /dev/null && {
        builtin cd "$1"
        return $?
    }
    local SAVEIFS="$IFS"
    IFS=$'\n\b'
    local wks="$PWD"
    [ '/' == "${1:0:1}" ] && wks=""
    local dir=(${1//\//$'\n'})
    local i
    for ((i = 0; i < ${#dir[@]}; ++i)); do
        local pat=${dir[i]}
        local cddirs=()
        local idx=0
        local j
        for j in $(\ls -a $wks/ 2> /dev/null); do
            [ -d "$wks/$j" ] && {
                [ "." == "${pat:0:1}" -a "." == "${j:0:1}" ] && {
                    cddirs[$idx]="$j"
                }
                [ "." != "${j:0:1}" ] && {
                    cddirs[$idx]="$j"
                }
            }
            ((idx = idx + 1))
        done
        if [[ $idx -lt 1 ]]; then
            echo "cd: $1: No matchable directory or path"
            return 1
        fi
        wks="$wks/$(lcsfind $pat "${cddirs[@]}")"
    done
    builtin cd "$wks/"
    IFS="$SAVEIFS"
    return $?
}

alias r='builtin cd /'          # '/' can't be as a command name and is instead of 'r'.
alias ..='builtin cd ..'
#alias ...='builtin cd ../..'
#alias 4.='builtin cd ../../../' # we can define more as command 'n.' to implement cd parent directories.

# vi mode
# The implement of clearing screan by 'ctrl+l' is in file ~/.inputrc
#set -o vi
# enable core, 10MB = 20480 blocks
ulimit -c 20480

has_cmd chez-scheme && alias scheme='chez-scheme'
has_cmd bc && alias bc='bc -lq'

_gen_add_path() {
     add_path() {
         local VAR=$1
         local d="$2"
         shift 2
         eval "local path=\"$d\$$VAR$d\""
         local i
         for i in $@; do
             case "$path" in
                 *"$d$i$d"*) :;; # already here
                 *) eval "$VAR=\"\$$VAR$d$i\"";;
             esac
         done
     }

     # a little Meta Programming in Bash
     local funcs=("add-path      PATH        :"
                  "lua_add-path  LUA_PATH    ;"
                  "lua_add-cpath LUA_CPATH   ;")
     local func
     for func in "${funcs[@]}"; do
         local func=($func)
         eval "${func[0]}() {
             add_path ${func[1]} \"${func[2]}\" \$@
         }"
     done
}
_gen_add_path

dump-path() {
    echo "list order of searching"
    echo "======================="
    echo "${PATH//:/$'\n'}"
}

# grep history
gh() {
    grep $@ <(history)
}

# Add other rocks tree: $HOME/.local
has_cmd lua && {
    alias luai='lua -e "package.path=package.path..\";$HOME/.config/init.lua\"" -i -linit'
    LUA_VERSION=$(lua -e 'print(_VERSION:match("%d.%d"))')
    LUA_PATH=$(lua -e 'print(package.path)')
    LUA_CPATH=$(lua -e 'print(package.cpath)')
    lua_add-path  "$HOME/.local/share/lua/$LUA_VERSION/?.lua"
    lua_add-path  "$HOME/.local/share/lua/$LUA_VERSION/?/init.lua"
    lua_add-cpath "$HOME/.local/lib/lua/$LUA_VERSION/?.so"

    export LUA_PATH LUA_CPATH
}

# Binaries of Python package for this user
add-path "$HOME/.local/bin"
# Binaries of Ruby gem for this user
has_cmd ruby && {
    RUBY_VERSION=$(grep -o '[[:digit:]]\.[[:digit:]]' <(ruby -v))
    add-path "$HOME/.gem/ruby/$RUBY_VERSION.0/bin"
}

#export PYTHONSTARTUP=~/.config/init.py
[[ $MAKEFLAGS != *-j* ]] && export MAKEFLAGS+=" -j$(nproc)"
# enable 256colors
export TERM=xterm-256color
# PROMPT_COMMAND is invoked before displaying PS1
#PROMPT_COMMAND="gen_short_workpath; $PROMPT_COMMAND"
export PS1="$cyan\$host\$(gen_short_workpath)$yellow\$(find_git_branch)$prompt_color\\$ $normal"
export PS4="+$cyan\${BASH_SOURCE##*/}$normal:$red\$LINENO$normal: "

# TODO 正确处理 bash 配置文件加载顺序
export EDITOR=vim
export SYSTEMD_EDITOR=$EDITOR

CHROOT=/var/lib/archbuild/

has_cmd vboxmanage && {
vmctl() {
    is_vm_running() {
        local runningvms
        local vm
        readarray -t runningvms < <(awk -F'"' '{print $2}' <(vboxmanage list runningvms))
        for vm in "${runningvms[@]}"; do
            if [[ "$vm" == "$1" ]]; then
                return 0
            fi
        done
        return -1
    }

    has_vm() {
        local vms
        local vm
        readarray -t vms < <(awk -F'"' '{print $2}' <(vboxmanage list vms))
        for vm in "${vms[@]}"; do
            if [[ "$vm" == "$1" ]]; then
                return 0
            fi
        done
        return -1
    }

    print_vms() {
        local running=
        local vm
        local vms
        local idx=1
        readarray -t vms < <(awk -F'"' '{print $2}' <(vboxmanage list vms))
        for vm in "${vms[@]}"; do
            running=
            if is_vm_running "$vm"; then
                running="running"
            fi
            echo -e "$idx. $vm\t$running"
            ((++idx))
        done
    }

    print_useage() {
        echo "Usage: vmctl {start | restart | stop | status} <vmname>"
        echo "       vmctl [help | list]"
        echo "       vmctl <vmname>"
    }


    local arg_cnt=$#
    local cmd="$1"
    local vmname="$2"
    local option="$3"

    has_cmd vboxmanage

    if [[ $# == 0 ]]; then
        print_vms
        return 0
    fi

    case "$cmd" in
        "start")
            if is_vm_running "$vmname"; then
                echo "Virtual Machine $vmname is running"
            elif [[ "$option" == "--gui" ]]; then
                vboxmanage startvm "$vmname"
            else
                vboxmanage startvm "$vmname" --type headless
            fi
            ;;
        "restart")
            if is_vm_running "$vmname"; then
                vboxmanage controlvm "$vmname" reset
            else
                echo "Virtual Machine $vmname is not running or doesn't exist"
            fi
            ;;
        "stop")
            if is_vm_running "$vmname"; then
                vboxmanage controlvm "$vmname" savestate
            else
                echo "Virtual Machine $vmname is not running or doesn't exist"
            fi
            ;;
        "status")
            if is_vm_running "$vmname"; then
                echo "Virtual Machine $vmname is running"
            elif has_vm $vmname; then
                echo "Virtual Machine $vmname isn't running"
            else
                echo "Virtual Machine $vmname doesn't exist"
            fi
            ;;
        "list")
            print_vms
            ;;
        "help")
            print_useage
            ;;
        *)
            # not cmd, maybe vmname
            if has_vm "$cmd"; then
                vboxmanage startvm "$cmd" --type headless
            else
                print_useage
            fi
            ;;
    esac
}
}   # has_cmd vboxmanage

unexport_cmds=("has_cmd")
for fun in "${unexport_cmds[@]}"; do
    eval "unset $fun"
done
unset unexport_cmds

# load fzf key bindings
[ -r /usr/share/fzf/key-bindings.bash ] && . /usr/share/fzf/key-bindings.bash

# Own shell scripts. #tools-tag
add-path "/home/ltk/.dotfiles/tools/bin" #tools-tag
