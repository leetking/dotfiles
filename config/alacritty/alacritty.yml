env:
  TERM: xterm-256color

window:
  dynamic_title: true
  opacity: 0.85
  dimensions:
    columns: 0
    lines: 0
  padding:
    x: 0
    y: 0
  dynamic_padding: true
  decorations: full
  class:
    instance: Alacritty
    general: Alacritty

scrolling:
  history: 20000
  multiplier: 3

font:
  normal:
    family: Migu 1M
    style: Regular
  bold:
    family: Migu 1M
    style: Bold
  italic:
    family: Migu 1M
    style: Italic
  size: 11.0
  offset:
    x: 0
    y: 0
  glyph_offset:
    x: 0
    y: 0

draw_bold_text_with_bright_colors: true

schemes:
  afterglow: &afterglow
    # Default colors
    primary:
      background: '0x2c2c2c'
      foreground: '0xd6d6d6'
      dim_foreground:    '0xdbdbdb'
      bright_foreground: '0xd9d9d9'
      dim_background:    '0x202020' # not sure
      bright_background: '0x3a3a3a' # not sure
    # Cursor colors
    cursor:
      text:   '0x2c2c2c'
      cursor: '0xd9d9d9'
    # Normal colors
    normal:
      black:   '0x1c1c1c'
      red:     '0xbc5653'
      green:   '0x909d63'
      yellow:  '0xebc17a'
      blue:    '0x7eaac7'
      magenta: '0xaa6292'
      cyan:    '0x86d3ce'
      white:   '0xcacaca'
    # Bright colors
    bright:
      black:   '0x636363'
      red:     '0xbc5653'
      green:   '0x909d63'
      yellow:  '0xebc17a'
      blue:    '0x7eaac7'
      magenta: '0xaa6292'
      cyan:    '0x86d3ce'
      white:   '0xf7f7f7'
    # Dim colors
    dim:
      black:   '0x232323'
      red:     '0x74423f'
      green:   '0x5e6547'
      yellow:  '0x8b7653'
      blue:    '0x556b79'
      magenta: '0x6e4962'
      cyan:    '0x5c8482'
      white:   '0x828282'

  ayu_dark: &ayu_dark
    # Default colors
    primary:
      background: '0x0A0E14'
      foreground: '0xB3B1AD'
    # Normal colors
    normal:
      black:    '0x01060E'
      red:      '0xEA6C73'
      green:    '0x91B362'
      yellow:   '0xF9AF4F'
      blue:     '0x53BDFA'
      magenta:  '0xFAE994'
      cyan:     '0x90E1C6'
      white:    '0xC7C7C7'
    # Bright colors
    bright:
      black:    '0x686868'
      red:      '0xF07178'
      green:    '0xC2D94C'
      yellow:   '0xFFB454'
      blue:     '0x59C2FF'
      magenta:  '0xFFEE99'
      cyan:     '0x95E6CB'
      white:    '0xFFFFFF'

  tender: &tender
    # Default colors
    primary:
      background: '0x282828'
      foreground: '0xeeeeee'

    # Normal colors
    normal:
      black:   '0x282828'
      red:     '0xf43753'
      green:   '0xc9d05c'
      yellow:  '0xffc24b'
      blue:    '0xb3deef'
      magenta: '0xd3b987'
      cyan:    '0x73cef4'
      white:   '0xeeeeee'

    # Bright colors
    bright:
      black:   '0x4c4c4c'
      red:     '0xf43753'
      green:   '0xc9d05c'
      yellow:  '0xffc24b'
      blue:    '0xb3deef'
      magenta: '0xd3b987'
      cyan:    '0x73cef4'
      white:   '0xfeffff'

colors: *ayu_dark

bell:
  animation: EaseOutExpo
  # Disable the visual bell.
  duration: 0
  color: '0xffffff'

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }
  hide_when_typing: true
  hints:
    launcher:
      program: xdg-open
      args: []
    modifiers: None

selection:
  semantic_escape_chars: "#/,â”‚`|:\"' ()[]{}<>"
  save_to_clipboard: true

cursor:
  style: Block
  unfocused_hollow: true

live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (Linux/macOS) /bin/bash --login
#   - (Windows) powershell
#shell:
#  program: /bin/bash
#  args:
#    - --login

# Windows 10 ConPTY backend (Windows only)
#
# This will enable better color support and may resolve other issues,
# however this API and its implementation is still young and so is
# disabled by default, as stability may not be as good as the winpty
# backend.
#
# Alacritty will fall back to the WinPTY automatically if the ConPTY
# backend cannot be initialized.
enable_experimental_conpty_backend: false

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
key_bindings:
  # (Windows, Linux, and BSD only)
  - { key: V,        mods: Super, action: Paste            }
  - { key: C,        mods: Super, action: Copy             }
  #- { key: Insert,   mods: Shift,         action: PasteSelection   }
  #- { key: Key0,     mods: Control,       action: ResetFontSize    }
  #- { key: Equals,   mods: Control,       action: IncreaseFontSize }
  #- { key: Add,      mods: Control,       action: IncreaseFontSize }
  #- { key: Subtract, mods: Control,       action: DecreaseFontSize }
  #- { key: Minus,    mods: Control,       action: DecreaseFontSize }

  # (Windows only)
  #- { key: Return,   mods: Alt,           action: ToggleFullscreen }

  # (macOS only)
  #- { key: Key0,   mods: Command,         action: ResetFontSize    }
  #- { key: Equals, mods: Command,         action: IncreaseFontSize }
  #- { key: Add,    mods: Command,         action: IncreaseFontSize }
  #- { key: Minus,  mods: Command,         action: DecreaseFontSize }
  #- { key: K,      mods: Command,         action: ClearHistory     }
  #- { key: K,      mods: Command,         chars: "\x0c"            }
  #- { key: V,      mods: Command,         action: Paste            }
  #- { key: C,      mods: Command,         action: Copy             }
  #- { key: H,      mods: Command,         action: Hide             }
  #- { key: M,      mods: Command,         action: Minimize         }
  #- { key: Q,      mods: Command,         action: Quit             }
  #- { key: W,      mods: Command,         action: Quit             }
  #- { key: F,      mods: Command|Control, action: ToggleFullscreen }

  #- { key: Paste,                    action: Paste                            }
  #- { key: Copy,                     action: Copy                             }
  #- { key: L,         mods: Control, action: ClearLogNotice                   }
  #- { key: L,         mods: Control, chars: "\x0c"                            }
  #- { key: PageUp,    mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }
  #- { key: PageDown,  mods: Shift,   action: ScrollPageDown, mode: ~Alt       }
  #- { key: Home,      mods: Shift,   action: ScrollToTop,    mode: ~Alt       }
  #- { key: End,       mods: Shift,   action: ScrollToBottom, mode: ~Alt       }
  - {key: F11,                      action: ToggleFullscreen                  }
